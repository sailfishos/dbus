From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pekka Vuorela <pekka.vuorela@jolla.com>
Date: Wed, 19 Oct 2022 16:40:46 +0300
Subject: [PATCH] Revert "Stop using selinux_set_mapping() function"

Some devices have SELinux in otherwise permissive mode
but the /sys/fs/selinux/deny_unknown with value 1
and this commit was making the d-bus calls blocked.

This reverts commit 6072f8b24153d844a3033108a17bcd0c1a967816.
---
 bus/selinux.c | 75 +++++++++++++++++++++++----------------------------
 1 file changed, 33 insertions(+), 42 deletions(-)

diff --git a/bus/selinux.c b/bus/selinux.c
index 587ed693..763fdfd3 100644
--- a/bus/selinux.c
+++ b/bus/selinux.c
@@ -285,6 +285,24 @@ bus_selinux_pre_init (void)
 #endif
 }
 
+/*
+ * Private Flask definitions; the order of these constants must
+ * exactly match that of the structure array below!
+ */
+/* security dbus class constants */
+#define SECCLASS_DBUS       1
+
+/* dbus's per access vector constants */
+#define DBUS__ACQUIRE_SVC   1
+#define DBUS__SEND_MSG      2
+
+#ifdef HAVE_SELINUX
+static struct security_class_mapping dbus_map[] = {
+  { "dbus", { "acquire_svc", "send_msg", NULL } },
+  { NULL }
+};
+#endif /* HAVE_SELINUX */
+
 /**
  * Establish dynamic object class and permission mapping and
  * initialize the user space access vector cache (AVC) for D-Bus and set up
@@ -306,6 +324,13 @@ bus_selinux_full_init (BusContext *context, DBusError *error)
 
   _dbus_verbose ("SELinux is enabled in this kernel.\n");
 
+  if (selinux_set_mapping (dbus_map) < 0)
+    {
+      _dbus_warn ("Failed to set up security class mapping (selinux_set_mapping():%s).",
+                   strerror (errno));
+      return FALSE; 
+    }
+
   avc_entry_ref_init (&aeref);
   if (avc_open (NULL, 0) < 0)
     {
@@ -420,53 +445,19 @@ error:
 static dbus_bool_t
 bus_selinux_check (BusSELinuxID        *sender_sid,
                    BusSELinuxID        *override_sid,
-                   const char          *target_class,
-                   const char          *requested,
-                   DBusString          *auxdata)
+                   security_class_t     target_class,
+                   access_vector_t      requested,
+		   DBusString          *auxdata)
 {
-  int saved_errno;
-  security_class_t security_class;
-  access_vector_t requested_access;
-
   if (!selinux_enabled)
     return TRUE;
 
-  security_class = string_to_security_class (target_class);
-  if (security_class == 0)
-    {
-      saved_errno = errno;
-      log_callback (SELINUX_ERROR, "Unknown class %s", target_class);
-      if (security_deny_unknown () == 0)
-        {
-          return TRUE;
-	}
-
-      _dbus_verbose ("Unknown class %s\n", target_class);
-      errno = saved_errno;
-      return FALSE;
-    }
-
-  requested_access = string_to_av_perm (security_class, requested);
-  if (requested_access == 0)
-    {
-      saved_errno = errno;
-      log_callback (SELINUX_ERROR, "Unknown permission %s for class %s", requested, target_class);
-      if (security_deny_unknown () == 0)
-        {
-          return TRUE;
-	}
-
-      _dbus_verbose ("Unknown permission %s for class %s\n", requested, target_class);
-      errno = saved_errno;
-      return FALSE;
-    }
-
   /* Make the security check.  AVC checks enforcing mode here as well. */
   if (avc_has_perm (SELINUX_SID_FROM_BUS (sender_sid),
                     override_sid ?
                     SELINUX_SID_FROM_BUS (override_sid) :
                     bus_sid,
-                    security_class, requested_access, &aeref, auxdata) < 0)
+                    target_class, requested, &aeref, auxdata) < 0)
     {
     switch (errno)
       {
@@ -533,8 +524,8 @@ bus_selinux_allows_acquire_service (DBusConnection     *connection,
   
   ret = bus_selinux_check (connection_sid,
 			   service_sid,
-			   "dbus",
-			   "acquire_svc",
+			   SECCLASS_DBUS,
+			   DBUS__ACQUIRE_SVC,
 			   &auxdata);
 
   _dbus_string_free (&auxdata);
@@ -662,8 +653,8 @@ bus_selinux_allows_send (DBusConnection     *sender,
 
   ret = bus_selinux_check (sender_sid, 
 			   recipient_sid,
-			   "dbus",
-			   "send_msg",
+			   SECCLASS_DBUS, 
+			   DBUS__SEND_MSG,
 			   &auxdata);
 
   _dbus_string_free (&auxdata);
